{
    "title": "简介",
    "SingletonPattern": "单例模式",
    "introd": {
        "p1": "设计模式是软件开发的基本组成部分，因为它们为软件设计中经常出现的问题提供了典型的解决方案。设计模式不是提供特定的软件，而只是可用于以优化方式处理重复出现的主题的概念。",
        "p2": "在过去的几年里，Web开发生态系统发生了迅速的变化。虽然一些众所周知的设计模式可能不像以前那么有价值，但其他设计模式已经发展到用最新技术解决现代问题。",
        "p3": "Facebook 的 JavaScript 库 React 在过去 5 年中获得了巨大的关注，与 Angular、Vue、Ember 和 Svelte 等竞争对手的 JavaScript 库相比，它目前是 NPM 上下载次数最多的框架。由于 React 的流行，设计模式已被修改、优化并创建了新的模式，以便在当前的现代 Web 开发生态系统中提供价值。最新版本的 React 引入了一个名为 Hooks 的新功能，它在您的应用程序设计中起着非常重要的作用，可以取代许多传统的设计模式。",
        "p4": "现代 Web 开发涉及许多不同类型的模式。本项目涵盖了使用 ES2015+ 的常见设计模式的实现、好处和缺陷、特定于 React 的设计模式及其使用 React Hooks 的可能修改和实现，以及更多有助于改进现代 Web 应用程序的模式和优化！"
    },
    "singleton": {
        "title": "单例模式"
    },
    "prototype": {
        "title": "原型模式"
    },
    "proxy": {
        "title": "代理模式"
    },
    "observer": {
        "title": "观察者模式"
    },
    "module": {
        "title": "模块模式"
    },
    "mixin": {
        "title": "混合模式"
    },
    "middleware": {
        "title": "中间件模式"
    },
    "flyweight": {
        "title": "享元模式"
    },
    "factory": {
        "title": "工厂模式"
    },
    "AnimatingViewTransitions": {
        "title": "动画视图转换"
    },
    "OptimizeYourLoadingSequence": {
        "title": "优化加载序列"
    },
    "StaticImport": {
        "title": "静态导入"
    },
    "DynamicImport": {
        "title": "动态导入"
    },
    "ImportOnVisibility": {
        "title": "导入可见性"
    },
    "ImportOnInteraction": {
        "title": "交互导入"
    },
    "RouteBasedSplitting": {
        "title": "基于路由的拆分"
    },
    "BundleSplitting": {
        "title": "捆绑拆分"
    },
    "PRPLPattern": {
        "title": "PRPL模式"
    },
    "TreeShaking": {
        "title": "树摇"
    },
    "preload": {
        "title": "预加载"
    },
    "prefetch": {
        "title": "预取"
    },
    "OptimizeLoadingThirdParties": {
        "title": "优化第三方加载"
    },
    "ListVirtualization": {
        "title": "列表虚拟化"
    },
    "CompressingJavaScript": {
        "title": "压缩 JavaScript"
    },

    "container": {
        "title": "容器模式"
    },
    "HOC": {
        "title": "HOC"
    },
    "renderProps": {
        "title": "render props"
    },
    "hooks": {
        "title": "hooks"
    },
    "compound": {
        "title": "复合模式"
    },
    "CSR": {
        "title": "客户端渲染"
    },
    "SSR": {
        "title": "服务器端渲染"
    },
    "RSC": {
        "title": "React Server Components"
    },
    "staticRendering": {
        "title": "静态渲染"
    },
    "iStaticRendering": {
        "title": "增量静态渲染"
    },
    "streamServerSideRendering": {
        "title": "流式服务器端渲染"
    },
    "progressiveHydration": {
        "title": "progressive hydration"
    }
}