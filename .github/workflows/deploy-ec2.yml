name: deploy ec2

on:
  push:
    branches:
      - poc
      - mall
      - mall-fullstack

jobs:
  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PEM }}
          HOSTNAME: ${{ secrets.EC2_IP }}
          USER_NAME: ${{ secrets.EC2_USER }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            # Access EC2
            cd /project/monorepo/
            echo "------ cd done ------"

            # Check the current branch and pull the latest changes
            echo "Branch name is: ${{ github.ref_name }}"
            if [ "${{ github.ref_name }}" = "poc" ]; then
              git checkout poc
              git pull origin poc
              DOCKERFILE="Dockerfile.poc"
              IMAGE_NAME="knowledge-web-docker"
              PORT=4000
            elif [ "${{ github.ref_name }}" = "mall" ]; then
              git checkout mall
              git pull origin mall
              DOCKERFILE="Dockerfile.mall"
              IMAGE_NAME="mall-web-docker"
              PORT=4001
            elif [ "${{ github.ref_name }}" = "mall-fullstack" ]; then
              # git checkout mall-fullstack
              # git pull origin mall-fullstack
              DOCKERFILE="Dockerfile.mall.fullstack"
              IMAGE_NAME=" jianghr/mall-web-docker:latest"
              PORT=4002
            else
              echo "Unknown branch. Exiting..."
              exit 1
            fi

            echo "------ git pull done ------"

            # Stop and remove the existing container for this branch
            echo "Stopping and removing container for $IMAGE_NAME..."
            docker rm $(docker stop $(docker ps -a -q --filter ancestor=$IMAGE_NAME)) || echo "No containers to stop."
            echo "------ docker rm done ------"

            # Build the Docker image using the specific Dockerfile and image name
            # echo "Building $IMAGE_NAME..."
            # docker build -f $DOCKERFILE -t $IMAGE_NAME .
            # echo "------ docker build done ------"

            # Run the new container with the branch-specific image name and port
            docker pull $IMAGE_NAME
            echo "------ docker pull done ------"
            docker run -d -p $PORT:$PORT $IMAGE_NAME
            echo "------ docker run done ------"
          '
          rm -rf private_key
